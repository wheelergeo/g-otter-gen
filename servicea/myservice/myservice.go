// Code generated by Kitex v0.7.1. DO NOT EDIT.

package myservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	servicea "github.com/wheelergeo/g-otter-gen/servicea"
)

func serviceInfo() *kitex.ServiceInfo {
	return myServiceServiceInfo
}

var myServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MyService"
	handlerType := (*servicea.MyService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Hello": kitex.NewMethodInfo(helloHandler, newMyServiceHelloArgs, newMyServiceHelloResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "servicea",
		"ServiceFilePath": "../../gen/idl/servicea.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func helloHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*servicea.MyServiceHelloArgs)
	realResult := result.(*servicea.MyServiceHelloResult)
	success, err := handler.(servicea.MyService).Hello(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newMyServiceHelloArgs() interface{} {
	return servicea.NewMyServiceHelloArgs()
}

func newMyServiceHelloResult() interface{} {
	return servicea.NewMyServiceHelloResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Hello(ctx context.Context, req *servicea.MyReq) (r string, err error) {
	var _args servicea.MyServiceHelloArgs
	_args.Req = req
	var _result servicea.MyServiceHelloResult
	if err = p.c.Call(ctx, "Hello", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
